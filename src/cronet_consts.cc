
#include "cronet_consts.h"

#include <vector>

#include "addon_node.h"
#include "cronet_util.h"

static napi_value RegisterCronetResult(napi_env env, napi_value exports) {
  napi_status status;
  napi_value obj;
  napi_value value;
  std::vector<napi_property_descriptor> properties;

  DECLARE_CRONET_CONST(Cronet_RESULT, SUCCESS);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_ARGUMENT);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_ARGUMENT_INVALID_PIN);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_ARGUMENT_INVALID_HOSTNAME);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_ARGUMENT_INVALID_HTTP_METHOD);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_ARGUMENT_INVALID_HTTP_HEADER);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE_STORAGE_PATH_IN_USE);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE_CANNOT_SHUTDOWN_ENGINE_FROM_NETWORK_THREAD);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE_ENGINE_ALREADY_STARTED);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE_REQUEST_ALREADY_STARTED);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE_REQUEST_NOT_INITIALIZED);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE_REQUEST_ALREADY_INITIALIZED);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE_REQUEST_NOT_STARTED);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE_UNEXPECTED_REDIRECT);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE_UNEXPECTED_READ);
  DECLARE_CRONET_CONST(Cronet_RESULT, ILLEGAL_STATE_READ_FAILED);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_HOSTNAME);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_SHA256_PINS);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_EXPIRATION_DATE);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_ENGINE);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_URL);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_CALLBACK);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_EXECUTOR);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_METHOD);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_HEADER_NAME);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_HEADER_VALUE);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_PARAMS);
  DECLARE_CRONET_CONST(Cronet_RESULT, NULL_POINTER_REQUEST_FINISHED_INFO_LISTENER_EXECUTOR);

  NODE_API_CALL(env, napi_create_object(env, &obj));
  NODE_API_CALL(env, napi_define_properties(env, obj, properties.size(), &properties[0]));
  NODE_API_CALL(env, napi_set_named_property(env, exports, "Cronet_RESULT", obj));
  return nullptr;
}

napi_value CronetConsts::Register(napi_env env, napi_value exports) {
  RegisterCronetResult(env, exports);
  return exports;
}
